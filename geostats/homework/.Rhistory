library(gstat)
library(lattice)
library(sp)
library(geoR)
library(maps)
library(usmap)
#library(spatial)
library(fields)
library(akima)
source("~/spring2020/geostats/scripts/allfunctions.r")
source("~/spring2020/geostats/scripts/rotateaxis.r")
source("~/spring2020/geostats/scripts/panel.gamma0.r")
scallops = read.table("~/spring2020/geostats/datasets/scallops.txt",header=T)
X = scallops$long
Y = scallops$lat
catch_t = scallops$tcatch
catch_t_log = log(catch_t+1)
summary(catch_t)
catch_t.conc = interp(X,Y,catch_t_log,nx=150,ny=150)
par(mfrow=c(1,3))
image(catch_t.conc,xlab="Longitude",ylab="Latitude",cex.lab=1.6,   # Creates greyscale map of interpolated
main="Total Catch",   #   log concentrations using the colors
cex.axis=1.5,col=rev(heat.colors(24)),        #   in "heat.colors" in reverse, with
cex.main=1.2) #   axis labels and a title.
points(X,Y)
hist(catch_t,main="Total Catch")
hist(catch_t_log,main="Log Transformed Total Catch")
##########################
#  PART B
catch_t.conc = interp(X,Y,catch_t_log,nx=75,ny=75)
par(mfrow=c(1,1))
map("usa",xlim=c(-75,-71),ylim=c(38.2,41.5),fill=T,col=2)
points(scallops$long,scallops$lat,pch=16,cex=.75)
image(catch_t.conc,xlab="Longitude",ylab="Latitude",cex.lab=1.6,   # Creates greyscale map of interpolated
main="Total Catch",   #   log concentrations using the colors
cex.axis=1.5,col=rev(heat.colors(24)),        #   in "heat.colors" in reverse, with
cex.main=1.2) #   axis labels and a title.
contour(catch_t.conc,add=T)
############################
# PART C
xy = cbind(X,Y)
coords_trans = rotateaxis(xy,52)
catch_t_loggamma = log(catch_t + 1)
x = coords_trans$newx
y = coords_trans$newy
w = y-min(y)
nlfit = nls(catch_t_loggamma ~ (delta*x + w^(alpha-1)*
exp(-w/beta + gamma)) , start=list(delta=0,alpha=5.96,
beta=0.07766,gamma=12.8755))
'''
solved for parameters with python:
import numpy as np
from numpy.linalg import solve
A = np.array([[np.log(0.25),-0.25,1],[np.log(0.5),-0.5,1],[np.log(1),-1,1]])
b = np.array([np.log(1),np.log(5),np.log(1)])
b = np.Transpose(b)
x = solve(A,b)
x[0] -= 1
x[1] = 1/x[1]
In [11]: x
Out[11]: array([ 5.96578428,  0.07766687, 12.8755033 ])
'''
summary(nlfit)
# Could refer to parameters as:
# =============================
delta = summary(nlfit)$par[1]
alpha = summary(nlfit)$par[2]
beta = summary(nlfit)$par[3]
gamma = summary(nlfit)$par[4]
# =============================
zfunc = function(x,y){
delta = -0.08790
alpha = 9.40226
beta  = 0.05821
gamma = 15.80569
w = y-min(y)
z = (delta*x + w^(alpha-1)*exp(-w/beta + gamma))
return (z)
}
catch_t_log_trend = zfunc(x,y)
catch_t_log_resids = catch_t_log - catch_t_log_trend
catch_t_log.conc = interp(X,Y,catch_t_log,nx=150,ny=150)
catch_t_log_trend.conc = interp(x,y,catch_t_log_trend,nx=150,ny=150)
catch_t_log_resids.conc = interp(x[catch_t_log_resids!=-Inf],y[catch_t_log_resids!=-Inf],catch_t_log_resids[catch_t_log_resids!=-Inf],nx=150,ny=150)
par(mfrow=c(1,3))
image(catch_t_log.conc,xlab="Longitude",ylab="Lattitude",cex.lab=1.6,   # Creates greyscale map of interpolated
main="Log Transformed Total Catch",   #   log concentrations using the colors
cex.axis=1.5,col=rev(heat.colors(24)),        #   in "heat.colors" in reverse, with
cex.main=1.2) #   axis labels and a title.
points(x,y)
image(catch_t_log_trend.conc,xlab="Longitude",ylab="Lattitude",cex.lab=1.6,   # Creates greyscale map of interpolated
main="Inferred Trend of Log Transformed Total Catch",   #   log concentrations using the colors
cex.axis=1.5,col=rev(heat.colors(24)),        #   in "heat.colors" in reverse, with
cex.main=1.2) #   axis labels and a title.
points(x,y)
image(catch_t_log_resids.conc,xlab="Longitude",ylab="Lattitude",cex.lab=1.6,   # Creates greyscale map of interpolated
main="Inferred Trend Residuals of Log Transformed Total Catch",   #   log concentrations using the colors
cex.axis=1.5,col=rev(heat.colors(24)),        #   in "heat.colors" in reverse, with
cex.main=1.2) #   axis labels and a title.
points(x,y)
#########################################
# PART D
par(mfrow=c(1,2))
plot(catch_t_log,catch_t_log_resids,ylab='Residuals',xlab='Trend',main='Log Transformed Total Catch Fitted Trend vs Residuals')
abline(0,0)
qqnorm(catch_t_log_resids[catch_t_log_resids!=-Inf],main="Normal Q-Q Plot",xlab= "Theoretical Quantiles")
qqline(catch_t_log_resids,distribution = qnorm, probs = c(0.25, 0.75) )
par(mfrow=c(1,2))
plot(catch_t_log,catch_t_log_resids,ylab='Residuals',xlab='Trend',main='Log Transformed Total Catch Fitted Trend vs Residuals')
abline(0,0)
qqnorm(catch_t_log_resids[catch_t_log_resids!=-Inf],main="Normal Q-Q Plot",xlab= "Theoretical Quantiles")
qqline(catch_t_log_resids,distribution = qnorm, probs = c(0.25, 0.75) )
plot(catch_t_log,catch_t_log_resids,ylab='Residuals',xlab='Trend',main='Log Transformed Total Catch Fitted Trend vs Residuals')
abline(0,0)
qqnorm(catch_t_log_resids[catch_t_log_resids!=-Inf],main="Normal Q-Q Plot",xlab= "Theoretical Quantiles")
qqline(catch_t_log_resids,distribution = qnorm, probs = c(0.25, 0.75) )
par(mfrow=c(1,2))
plot(catch_t_log,catch_t_log_resids,ylab='Residuals',xlab='Trend',main='Log Transformed Total Catch Fitted Trend vs Residuals')
abline(0,0)
qqnorm(catch_t_log_resids[catch_t_log_resids!=-Inf],main="Normal Q-Q Plot",xlab= "Theoretical Quantiles")
qqline(catch_t_log_resids,distribution = qnorm, probs = c(0.25, 0.75) )
catch_t_log_resids.vario = variogram(data~1,data=df,width=0.1,cutoff=1)
par(mfrow=c(1,2))
angles = seq(0,165,15)
df <- data.frame(x,y,data=catch_t_log_resids)
coordinates(df) = ~x+y
catch_t_log_resids.vario_dir = variogram(data~1,data=df,width=0.1,cutoff=1,alpha=angles,tol.hor = 30 )
catch_t_log_resids.vario = variogram(data~1,data=df,width=0.1,cutoff=1)
plot(catch_t_log_resids.vario,main='Isotropic Variogram for Log Transformed Catch Residuals')
xyplot(gamma ~ dist|as.factor(dir.hor),
data=catch_t_log_resids.vario_dir,layout=c(4,3), panel =
panel.gamma0, gamma0=2.3, main=
"Interpolated Directional Ranges")
coords = cbind(x,y)
anisopars = cbind(90,2.55)
coords_corrected = coords.aniso(coords,anisopars)
newx = coords_corrected[,1]
newy = coords_corrected[,2]
df_c = data.frame(x=newx,y=newy,data=catch_t_log_resids)
coordinates(df_c) = ~x+y
iso_var = variogram(data~1,data=df_c,width=0.1,cutoff=1)
par(mfrow=c(1,1))
plot(iso_var,main="Isotropic Variogram For Corrected Points")
model1 = fit.variogram(catch_t_log_resids.vario_dir,vgm(1.1,"Sph",0.3,1.4,anis=c(90,0.4)))
plot(iso_var, model1 ,main="Empirical Variogram and Fitted Values")
summary(model1)
plot(catch_t_log_resids.vario_dir,model1,main="Anisotropy-Corrected Variograms" )
# PART I
par(mfrow=c(1,1))
poly = chull(x,y)
minx = min(x)
maxx = max(x)
miny = min(y)
maxy = max(y)
seqx = seq(minx,maxx,0.2)
seqy = seq(miny,maxy,0.2)
poly.in = polygrid(seqx,seqy, cbind(x,y)[poly,])
coordinates(poly.in) = ~x+y
scall.rot <- data.frame(x,y,resid=catch_t_log_resids)
coordinates(scall.rot) = ~x+y
krige.out = krige(resid ~ 1, scall.rot ,poly.in, model=model1)
pred_var = interp(krige.out@coords[,1],krige.out@coords[,2],krige.out@data[["var1.pred"]],nx=150,ny=150)
pred_std = interp(krige.out@coords[,1],krige.out@coords[,2],krige.out@data[["var1.var"]],nx=150,ny=150)
par(mfrow=c(1,2))
image(pred_var,xlab="Longitude",ylab="Latitude",cex.lab=1.6,main="Res Pred From Kriging",cex.axis=1.5,col=rev(heat.colors(24)),cex.main=1.2)
contour(pred_var,main="Pred Res Contour")
par(mfrow=c(1,2))
image(pred_std,xlab="Longitude",ylab="Latitude",cex.lab=1.6,main="Res STD From Kriging",cex.axis=1.5,col=rev(heat.colors(24)),cex.main=1.2)
contour(pred_std,main="Pred STD Contour")
# PART I
par(mfrow=c(1,1))
poly = chull(x,y)
minx = min(x)
maxx = max(x)
miny = min(y)
maxy = max(y)
seqx = seq(minx,maxx,0.2)
seqy = seq(miny,maxy,0.2)
poly.in = polygrid(seqx,seqy, cbind(x,y)[poly,])
coordinates(poly.in) = ~x+y
scall.rot <- data.frame(x,y,resid=catch_t_log_resids)
coordinates(scall.rot) = ~x+y
krige.out = krige(resid ~ 1, scall.rot ,poly.in, model=model1)
pred_var = interp(krige.out@coords[,1],krige.out@coords[,2],krige.out@data[["var1.pred"]],nx=150,ny=150)
pred_std = interp(krige.out@coords[,1],krige.out@coords[,2],krige.out@data[["var1.var"]],nx=150,ny=150)
par(mfrow=c(1,2))
image(pred_var,xlab="Longitude",ylab="Latitude",cex.lab=1.6,main="Res Pred From Kriging",cex.axis=1.5,col=rev(heat.colors(24)),cex.main=1.2)
contour(pred_var,main="Pred Res Contour")
par(mfrow=c(1,2))
image(pred_std,xlab="Longitude",ylab="Latitude",cex.lab=1.6,main="Res STD From Kriging",cex.axis=1.5,col=rev(heat.colors(24)),cex.main=1.2)
contour(pred_std,main="Pred STD Contour")
trend = zfunc(poly.in@coords[,1],poly.in@coords[,2])
predictions = krige.out@data[["var1.pred"]] + trend
predictions.interp = interp(krige.out@coords[,1],krige.out@coords[,2],predictions,nx=150,ny=150)
predictions.interp[["z"]] = exp(predictions.interp[["z"]])
par(mfrow=c(1,2))
image(predictions.interp,xlab="Longitude",ylab="Latitude",cex.lab=1.6,main="Res Pred From Kriging",cex.axis=1.5,col=rev(heat.colors(24)),cex.main=1.2)
contour(predictions.interp,main="Pred Res Contour")
trend = zfunc(poly.in@coords[,1],poly.in@coords[,2])
predictions = krige.out@data[["var1.pred"]] + trend
predictions.interp = interp(krige.out@coords[,1],krige.out@coords[,2],predictions,nx=150,ny=150)
par(mfrow=c(1,2))
image(predictions.interp,xlab="Longitude",ylab="Latitude",cex.lab=1.6,main="Res Pred From Kriging",cex.axis=1.5,col=rev(heat.colors(24)),cex.main=1.2)
contour(predictions.interp,main="Pred Res Contour")
trend = zfunc(poly.in@coords[,1],poly.in@coords[,2])
predictions = krige.out@data[["var1.pred"]] + trend
predictions.interp = interp(krige.out@coords[,1],krige.out@coords[,2],predictions,nx=150,ny=150)
par(mfrow=c(1,2))
image(predictions.interp,xlab="Longitude",ylab="Latitude",cex.lab=1.6,main="Res Pred From Kriging",cex.axis=1.5,col=rev(heat.colors(24)),cex.main=1.2)
contour(predictions.interp,main="Pred Res Contour")
trend = zfunc(poly.in@coords[,1],poly.in@coords[,2])
predictions = krige.out@data[["var1.pred"]] + trend
predictions.interp = interp(krige.out@coords[,1],krige.out@coords[,2],predictions,nx=150,ny=150)
par(mfrow=c(1,2))
image(predictions.interp,xlab="Longitude",ylab="Latitude",cex.lab=1.6,main="Pred Log Catch From Kriging",cex.axis=1.5,col=rev(heat.colors(24)),cex.main=1.2)
contour(predictions.interp,main="Pred Log Catch Contour")
library(gstat)
library(lattice)
library(sp)
library(geoR)
library(map)
library(usmap)
library(TSdist)
source("~/spring2020/geostats/scripts/allfunctions.r")
source("~/spring2020/geostats/scripts/getCD.r")
x = c(130,150,170,156,151,161,137,160,139,145)
y = c(231,228,234,228,218,241,240,218,220,234)
v = c(530.3,402.3,173.1,458.4,594.3,141.9,112.5,580.4,535.9,333.2)
library(gstat)
library(lattice)
library(sp)
library(geoR)
library(usmap)
library(TSdist)
source("~/spring2020/geostats/scripts/allfunctions.r")
source("~/spring2020/geostats/scripts/getCD.r")
x = c(130,150,170,156,151,161,137,160,139,145)
y = c(231,228,234,228,218,241,240,218,220,234)
v = c(530.3,402.3,173.1,458.4,594.3,141.9,112.5,580.4,535.9,333.2)
par(mfrow=c(1, 1))
plot(x, y, type="n",
xlab='x', ylab='y', main='Walker Lake V')
text(x, y, format(round(v, 1)),
cex=0.7)
# determine azi of maximum continuity
angles = seq(0,165,15)
df = data.frame(x=x,y=y,data=v)
coordinates(df) = ~x+y
walk.vario = variogram(data~1,data=df,width=1,cutoff=20,alpha=angles,tol.hor = 35 )
plot(walk.vario,main='Directional Variograms For Walker Lake Data' )
azi = 90
nug = 0
sill = 2000
range = 30
CD = getCD(x,y,155,235,nug,sill,range,azi,0,"spher")
C = CD$C
D = CD$D
ones = rep(1,length(x)+1)
Cinv = solve(C)
A = (Cinv%*%ones%*%t(ones)%*%Cinv%*%D)*(1/(t(ones)%*%Cinv%*%ones))[1]
B = Cinv%*%ones*( (1/t(ones)%*%Cinv%*%ones)[1])
Z = Cinv%*%D
w1 = Z - A + B
ones = rep(1,length(x))
Cinv = solve(CD$C[1:10,1:10])
MGLS = t(ones)%*%Cinv%*%v / t(ones)%*%Cinv%*%ones
Var = sum(v - MGLS)
STD = sqrt(Var)
w1*v
sum(w1*v)
STD
w1
dist = euclideanDistance(cbind(x,y),cbind(155,235))
IDW = 1 / dist^2
pred = IDW%*%v
euclideanDistance = function(vec1,vec2){
dist = rep(0,NROW(vec1))
z = NROW(vec1)
for (i in 1:z){
dist[i] = sqrt( (vec1[i,1] -vec2[1,1])^2 + (vec1[i,2] -vec2[1,2])^2 )
}
return(dist)
}
dist = euclideanDistance(cbind(x,y),cbind(155,235))
IDW = 1 / dist^2
pred = IDW%*%v
pred
IDW
sum(IDW)
IDW = IDW/(sum(IDW))
pred = IDW%*%v
pred
IDW
locx = 155
locy = 235
range = c(20,30,40,50)
for (i in 1:4){
CD = getCD(x,y,155,235,0,2000,range[i],azi,0,"spher")
C = CD$C
D = CD$D
ones = rep(1,length(x)+1)
Cinv = solve(C)
A = (Cinv%*%ones%*%t(ones)%*%Cinv%*%D)*(1/(t(ones)%*%Cinv%*%ones))[1]
B = Cinv%*%ones*( (1/t(ones)%*%Cinv%*%ones)[1])
Z = Cinv%*%D
w1 = Z - A + B
pred = sum(w1*v)
ones = rep(1,length(x))
Cinv = solve(CD$C[1:10,1:10])
MGLS = t(ones)%*%Cinv%*%v / t(ones)%*%Cinv%*%ones
Var = sum(v - MGLS)
STD = sqrt(Var)
print(range[i])
print(w1)
print(pred)
print(STD)
print("###################")
}
# Part E
sills = c(1000,3000,4000)
nug = 0
range = 30
azi = 90
for (i in 1:3){
CD = getCD(x,y,155,235,0,sills[i],30,azi,0,"spher")
C = CD$C
D = CD$D
ones = rep(1,length(x)+1)
Cinv = solve(C)
A = (Cinv%*%ones%*%t(ones)%*%Cinv%*%D)*(1/(t(ones)%*%Cinv%*%ones))[1]
B = Cinv%*%ones*( (1/t(ones)%*%Cinv%*%ones)[1])
Z = Cinv%*%D
w1 = Z - A + B
pred = sum(w1*v)
ones = rep(1,length(x))
Cinv = solve(CD$C[1:10,1:10])
MGLS = t(ones)%*%Cinv%*%v / t(ones)%*%Cinv%*%ones
Var = sum(v - MGLS)
STD = sqrt(Var)
print(sills[i])
print(w1)
print(pred)
print(STD)
print("###################")
}
# Part E
sills = c(1000,2000,3000,4000)
nug = 0
range = 30
azi = 90
for (i in 1:3){
CD = getCD(x,y,155,235,0,sills[i],30,azi,0,"spher")
C = CD$C
D = CD$D
ones = rep(1,length(x)+1)
Cinv = solve(C)
A = (Cinv%*%ones%*%t(ones)%*%Cinv%*%D)*(1/(t(ones)%*%Cinv%*%ones))[1]
B = Cinv%*%ones*( (1/t(ones)%*%Cinv%*%ones)[1])
Z = Cinv%*%D
w1 = Z - A + B
pred = sum(w1*v)
ones = rep(1,length(x))
Cinv = solve(CD$C[1:10,1:10])
MGLS = t(ones)%*%Cinv%*%v / t(ones)%*%Cinv%*%ones
Var = sum(v - MGLS)
STD = sqrt(Var)
print(sills[i])
print(w1)
print(pred)
print(STD)
print("###################")
}
sills = c(1000,2000,3000,4000)
nug = 0
range = 30
azi = 90
for (i in 1:4){
CD = getCD(x,y,155,235,0,sills[i],30,azi,0,"spher")
C = CD$C
D = CD$D
ones = rep(1,length(x)+1)
Cinv = solve(C)
A = (Cinv%*%ones%*%t(ones)%*%Cinv%*%D)*(1/(t(ones)%*%Cinv%*%ones))[1]
B = Cinv%*%ones*( (1/t(ones)%*%Cinv%*%ones)[1])
Z = Cinv%*%D
w1 = Z - A + B
pred = sum(w1*v)
ones = rep(1,length(x))
Cinv = solve(CD$C[1:10,1:10])
MGLS = t(ones)%*%Cinv%*%v / t(ones)%*%Cinv%*%ones
Var = sum(v - MGLS)
STD = sqrt(Var)
print(sills[i])
print(w1)
print(pred)
print(STD)
print("###################")
}
nuggets = c(0, 400,1000,2000)
sill = 2000
range = 30
azi = 90
for (i in 1:4){
CD = getCD(x,y,155,235,nuggets[i],sill,range,azi,0,"spher")
C = CD$C
D = CD$D
ones = rep(1,length(x)+1)
Cinv = solve(C)
A = (Cinv%*%ones%*%t(ones)%*%Cinv%*%D)*(1/(t(ones)%*%Cinv%*%ones))[1]
B = Cinv%*%ones*( (1/t(ones)%*%Cinv%*%ones)[1])
Z = Cinv%*%D
w1 = Z - A + B
pred = sum(w1*v)
ones = rep(1,length(x))
Cinv = solve(CD$C[1:10,1:10])
MGLS = t(ones)%*%Cinv%*%v / t(ones)%*%Cinv%*%ones
Var = sum(v - MGLS)
STD = sqrt(Var)
print(nuggets[i])
print(w1)
print(pred)
print(STD)
print("###################")
}
models = c("spher","gauss","expon")
sill = 2000
range = 30
azi = 90
nug = 0
for (i in 1:3){
CD = getCD(x,y,155,235,nug,sill,range,azi,0,models[i])
C = CD$C
D = CD$D
ones = rep(1,length(x)+1)
Cinv = solve(C)
A = (Cinv%*%ones%*%t(ones)%*%Cinv%*%D)*(1/(t(ones)%*%Cinv%*%ones))[1]
B = Cinv%*%ones*( (1/t(ones)%*%Cinv%*%ones)[1])
Z = Cinv%*%D
w1 = Z - A + B
pred = sum(w1*v)
ones = rep(1,length(x))
Cinv = solve(CD$C[1:10,1:10])
MGLS = t(ones)%*%Cinv%*%v / t(ones)%*%Cinv%*%ones
Var = sum(v - MGLS)
STD = sqrt(Var)
print(models[i])
print(w1)
print(pred)
print(STD)
print("###################")
}
1
ratios = c(0,2,3,4,5)
sill = 2000
range = 30
azi = 90
nug = 0
for (i in 1:5){
CD = getCD(x,y,155,235,nug,sill,range,azi,ratios[i],"spher")
C = CD$C
D = CD$D
ones = rep(1,length(x)+1)
Cinv = solve(C)
A = (Cinv%*%ones%*%t(ones)%*%Cinv%*%D)*(1/(t(ones)%*%Cinv%*%ones))[1]
B = Cinv%*%ones*( (1/t(ones)%*%Cinv%*%ones)[1])
Z = Cinv%*%D
w1 = Z - A + B
pred = sum(w1*v)
ones = rep(1,length(x))
Cinv = solve(CD$C[1:10,1:10])
MGLS = t(ones)%*%Cinv%*%v / t(ones)%*%Cinv%*%ones
Var = sum(v - MGLS)
STD = sqrt(Var)
print(ratios[i])
print(w1)
print(pred)
print(STD)
print("###################")
}
sill = 2000
range = 30
azi = 90
nug = 0
ratio = 0
CD = getCD(x,y,150,228,nug,sill,range,azi,ratio,"spher")
C = CD$C
D = CD$D
ones = rep(1,length(x)+1)
Cinv = solve(C)
A = (Cinv%*%ones%*%t(ones)%*%Cinv%*%D)*(1/(t(ones)%*%Cinv%*%ones))[1]
B = Cinv%*%ones*( (1/t(ones)%*%Cinv%*%ones)[1])
Z = Cinv%*%D
w1 = Z - A + B
pred = sum(w1*v)
ones = rep(1,length(x))
Cinv = solve(CD$C[1:10,1:10])
MGLS = t(ones)%*%Cinv%*%v / t(ones)%*%Cinv%*%ones
Var = sum(v - MGLS)
STD = sqrt(Var)
print(ratios[i])
print(w1)
print(pred)
print(STD)
print("###################")
library(gdal)
nepal = readOGR(dsn="~/spring2020/geostats/datasets/nepal/nepal.shp")
library(rgdal)
nepal = readOGR(dsn="~/spring2020/geostats/datasets/nepal/nepal.shp")
install.packages("rgdal")
install.packages(c("foreach", "glue", "gstat", "gtools", "intervals", "Rcpp", "sp", "spatstat", "tripack"))
library(rgdal)
install.packages("rgdal")
