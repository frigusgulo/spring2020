max(cellMeans)
contour(x=seq(1,30),y=seq(1,30),z=cellMeans)
library(tripack)                # Needed for "tri.mesh" triangulation
library(sp)                     # Needed for "point.in.polygon" function
library(splancs)                # Needed for "areapl" function
library(spatstat)               # Needed for "ppp" and "delaunay" functions
library(maps)
library(akima)
library(pracma)
library(e1071)
source("~/spring2020/geostats/scripts/triangfuncs.r") # Loads triangulation functions for use with polydec.
source("~/spring2020/geostats/scripts/polydec.r")# Loads R-script with all of my functions
source("~/spring2020/geostats/scripts/celldec.r")
source("~/spring2020/geostats/scripts/image.legend.r")
source("~/spring2020/geostats/scripts/allfunctions.r")
snow <- read.table("~/spring2020/geostats/homework/2_hw/snowdep.txt",header=T,sep = ",")
# 3 a - box plot, histogram, heatmap, correlogram (both axes)
snow.conc <- interp(snow$x,snow$y,snow$depth,nx=1500,ny=1500)
image(snow.conc,xlab="long",ylab="lat",cex.lab=1.6,   # Creates greyscale map of interpolated
main="Greyscale Map of Snowfall",   #   log concentrations using the colors
cex.axis=1.5,col=rev(heat.colors(24)),        #   in "heat.colors" in reverse, with
cex.main=1.2) #   axis labels and a title.
image.legend(6,47.8,zlim=range(snow$depth),       # Puts a legend on the map with upper
col=rev(heat.colors(24)))
boxplot(snow$depth)
hist(snow$depth, xlab="Depth(cm)",ylab="Frequency",
cex.lab=1.6,axes=F,       #   with no axes drawn (axes=F), axis
main="Histogram of snowfall measurements", #   labels, and a title using the
cex.main=1.6,mgp=c(2.7,1,0),density=24,    #   break points in "breaks".
angle=45)
axis(1,pos=0,cex.axis=1.5)                   # Appends an x-axis at position y=0
axis(2,pos=0,cex.axis=1.5)
x=snow$x
y=snow$y
v = snow$depth
u = snow$depth
dtol = 0.25
atol = 25
h <- c(0,1,2,3,4,5,6)                              # Sets a vector of h-values.
out <- matrix(nrow=length(h),ncol=3)               # Defines an hx3 blank matrix.
for (i in 0:6) out[i+1,] <- as.numeric(            # Loops through distances of 0 to 6 and
hscatter(x,y,u,v,c(0,i),dtol=dtol,atol=atol))                        #   calculates cross-functions for each.
cch <- out[,1]
cph <- out[,2 ]
cgh <- out[,3]     # Defines the vectors of cross-covariances,
#   cross-corr's, & cross-semivariograms.
par(mfrow=c(2,2))                                  # Sets up a 2x2 graphics window.
plot(h,cch,type="n",axes=F,xlab="",ylab="")        # Creates a completely blank plot.
plot(h,cch,type="l",xlab="|h|",ylab="Cross - C(h)",# Plots the cross-correlations vs. h
main="Cross-Covariogram for U,V",cex.lab=1.5,    #   with sizes controlled by "cex".
cex.axis=1.3,cex.main=1.5)
plot(h,cph,type="l",xlab="|h|",ylab="Cross - p(h)",# Plots the cross-correlogram vs. h
main="Cross-Correlogram for U,V",cex.lab=1.5,    #   with sizes controlled by "cex".
cex.axis=1.3,cex.main=1.5)
plot(h[-1],cgh[-1],type="l",xlab="|h|",cex.lab=1.5,# Plots the cross-semivariogram vs. h
ylab="Cross - Gamma(h)",cex.axis=1.3,            #   with sizes controlled by "cex".
main="Cross-Semivariogram for U,V",cex.main=1.5)
out_y <- matrix(nrow=length(h),ncol=3)               # Defines an hx3 blank matrix.
for (i in 0:6) out_y[i+1,] <- as.numeric(            # Loops through distances of 0 to 6 and
hscatter(x,y,v,u,c(i,0),dtol=dtol,atol=atol))                        #   calculates cross-functions for each.
cch_y <- out_y[,1]
cph_y <- out_y[,2]
cgh_y <- out_y[,3]     # Defines the vectors of cross-covariances,
#   cross-corr's, & cross-semivariograms.
par(mfrow=c(2,2))                                  # Sets up a 2x2 graphics window.
plot(h,cch_y,type="n",axes=F,xlab="",ylab="")        # Creates a completely blank plot.
plot(h,cch_y,type="l",xlab="|h|",ylab="Cross - C(h)",# Plots the cross-correlations vs. h
main="Cross-Covariogram for U,V",cex.lab=1.5,    #   with sizes controlled by "cex".
cex.axis=1.3,cex.main=1.5)
plot(h,cph_y,type="l",xlab="|h|",ylab="Cross - p(h)",# Plots the cross-correlogram vs. h
main="Cross-Correlogram for U,V",cex.lab=1.5,    #   with sizes controlled by "cex".
cex.axis=1.3,cex.main=1.5)
plot(h[-1],cgh_y[-1],type="l",xlab="|h|",cex.lab=1.5,# Plots the cross-semivariogram vs. h
ylab="Cross - Gamma(h)",cex.axis=1.3,            #   with sizes controlled by "cex".
main="Cross-Semivariogram for U,V",cex.main=1.5)
# 3 b - sample mean, discuss biased (it is, samples were clustered)
snowmean = mean(snow$depth)
snowskew = skewness(snow$depth)
# 3 c - polygonal declustering
pd = polydec(snow$x,snow$y,peel=7)
pd = pd / sum(pd)
pd_mean = sum(snow$depth*pd)
par(mfrow=c(1,1))
# 3 d - cell declustering
cellMeans <- matrix(nrow=30,ncol=30)
for (i in 1:30){
for (j in 1:30){
cellMeans[i,j] = celldec(snow$x,snow$y,snow$depth,i,j)
}
}
rotate_one_eighty <- function(x) { rot90(x, 2) }
cellMeans = rotate_one_eighty(cellMeans)
contour(x=seq(1,30),y=seq(1,30),z=cellMeans)
max(cellMeans)
library(sp)
library(rgdal)
gravity = read.csv("~/spring2020/geostats/homework/2_hw/gravity255.txt")
xy = LongLatToUTM(gravity$long,gravity$lat,11)
x = xy$x
y = xy$y
install.packages("sp")
library(sp)
library(rgdal)
gravity = read.csv("~/spring2020/geostats/homework/2_hw/gravity255.txt")
xy = LongLatToUTM(gravity$long,gravity$lat,11)
x = xy$x
y = xy$y
out = point.crossval(x,y,gravity$gravity, 0.5,20000)
install.packages("rgdal")
library(sp)
library(rgdal)
gravity = read.csv("~/spring2020/geostats/homework/2_hw/gravity255.txt")
xy = LongLatToUTM(gravity$long,gravity$lat,11)
x = xy$x
y = xy$y
out = point.crossval(x,y,gravity$gravity, 0.5,20000)
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
library(sp)
library(rgdal)
gravity = read.csv("~/spring2020/geostats/homework/2_hw/gravity255.txt")
xy = LongLatToUTM(gravity$long,gravity$lat,11)
x = xy$x
y = xy$y
out = point.crossval(x,y,gravity$gravity, 0.5,20000)
install.packages("rgdal", dependencies = T)
install.packages("rgdal", dependencies = T)
snow <- read.table("~/spring2020/geostats/homework/2_hw/snowdep.txt",header=T,sep = ",")
# 3 a - box plot, histogram, heatmap, correlogram (both axes)
snow.conc <- interp(snow$x,snow$y,snow$depth,nx=100,ny=100)
source("~/spring2020/geostats/scripts/triangfuncs.r") # Loads triangulation functions for use with polydec.
source("~/spring2020/geostats/scripts/polydec.r")# Loads R-script with all of my functions
source("~/spring2020/geostats/scripts/celldec.r")
source("~/spring2020/geostats/scripts/image.legend.r")
source("~/spring2020/geostats/scripts/allfunctions.r")
snow <- read.table("~/spring2020/geostats/homework/2_hw/snowdep.txt",header=T,sep = ",")
# 3 a - box plot, histogram, heatmap, correlogram (both axes)
snow.conc <- interp(snow$x,snow$y,snow$depth,nx=100,ny=100)
library(tripack)                # Needed for "tri.mesh" triangulation
library(sp)                     # Needed for "point.in.polygon" function
library(splancs)                # Needed for "areapl" function
library(spatstat)               # Needed for "ppp" and "delaunay" functions
library(maps)
library(akima)
library(pracma)
library(e1071)
source("~/spring2020/geostats/scripts/triangfuncs.r") # Loads triangulation functions for use with polydec.
source("~/spring2020/geostats/scripts/polydec.r")# Loads R-script with all of my functions
source("~/spring2020/geostats/scripts/celldec.r")
source("~/spring2020/geostats/scripts/image.legend.r")
source("~/spring2020/geostats/scripts/allfunctions.r")
snow <- read.table("~/spring2020/geostats/homework/2_hw/snowdep.txt",header=T,sep = ",")
# 3 a - box plot, histogram, heatmap, correlogram (both axes)
snow.conc <- interp(snow$x,snow$y,snow$depth,nx=100,ny=100)
install.packages("maps")
install.packages("sp")
install.packages("sp")
install.packages("splancs","spatstat","maps","akima","pracma")
install.packages("splancs")
library(tripack)                # Needed for "tri.mesh" triangulation
library(sp)                     # Needed for "point.in.polygon" function
library(splancs)                # Needed for "areapl" function
library(spatstat)               # Needed for "ppp" and "delaunay" functions
library(maps)
library(akima)
library(pracma)
library(e1071)
source("~/spring2020/geostats/scripts/triangfuncs.r") # Loads triangulation functions for use with polydec.
source("~/spring2020/geostats/scripts/polydec.r")# Loads R-script with all of my functions
source("~/spring2020/geostats/scripts/celldec.r")
source("~/spring2020/geostats/scripts/image.legend.r")
source("~/spring2020/geostats/scripts/allfunctions.r")
snow <- read.table("~/spring2020/geostats/homework/2_hw/snowdep.txt",header=T,sep = ",")
# 3 a - box plot, histogram, heatmap, correlogram (both axes)
snow.conc <- interp(snow$x,snow$y,snow$depth,nx=100,ny=100)
install.packages(c("akima", "pracma", "e1071", "tripack"))
library(tripack)                # Needed for "tri.mesh" triangulation
library(sp)                     # Needed for "point.in.polygon" function
library(splancs)                # Needed for "areapl" function
library(spatstat)               # Needed for "ppp" and "delaunay" functions
library(maps)
library(akima)
library(pracma)
library(e1071)
source("~/spring2020/geostats/scripts/triangfuncs.r") # Loads triangulation functions for use with polydec.
source("~/spring2020/geostats/scripts/polydec.r")# Loads R-script with all of my functions
source("~/spring2020/geostats/scripts/celldec.r")
source("~/spring2020/geostats/scripts/image.legend.r")
source("~/spring2020/geostats/scripts/allfunctions.r")
snow <- read.table("~/spring2020/geostats/homework/2_hw/snowdep.txt",header=T,sep = ",")
# 3 a - box plot, histogram, heatmap, correlogram (both axes)
snow.conc <- interp(snow$x,snow$y,snow$depth,nx=100,ny=100)
image(snow.conc,xlab="long",ylab="lat",cex.lab=1.6,   # Creates greyscale map of interpolated
main="Greyscale Map of Snowfall",   #   log concentrations using the colors
cex.axis=1.5,col=rev(heat.colors(24)),        #   in "heat.colors" in reverse, with
cex.main=1.2) #   axis labels and a title.
image.legend(6,47.8,zlim=range(snow$depth),       # Puts a legend on the map with upper
col=rev(heat.colors(24)))
library(tripack)                # Needed for "tri.mesh" triangulation
library(sp)                     # Needed for "point.in.polygon" function
library(splancs)                # Needed for "areapl" function
library(spatstat)               # Needed for "ppp" and "delaunay" functions
library(maps)
library(akima)
library(pracma)
library(e1071)
source("~/spring2020/geostats/scripts/triangfuncs.r") # Loads triangulation functions for use with polydec.
source("~/spring2020/geostats/scripts/polydec.r")# Loads R-script with all of my functions
source("~/spring2020/geostats/scripts/celldec.r")
source("~/spring2020/geostats/scripts/image.legend.r")
source("~/spring2020/geostats/scripts/allfunctions.r")
snow <- read.table("~/spring2020/geostats/homework/2_hw/snowdep.txt",header=T,sep = ",")
# 3 a - box plot, histogram, heatmap, correlogram (both axes)
snow.conc <- interp(snow$x,snow$y,snow$depth,nx=75,ny=75)
image(snow.conc,xlab="long",ylab="lat",cex.lab=1.6,   # Creates greyscale map of interpolated
main="Greyscale Map of Snowfall",   #   log concentrations using the colors
cex.axis=1.5,col=rev(heat.colors(24)),        #   in "heat.colors" in reverse, with
cex.main=1.2) #   axis labels and a title.
image.legend(6,47.8,zlim=range(snow$depth),       # Puts a legend on the map with upper
col=rev(heat.colors(24)))
library(tripack)                # Needed for "tri.mesh" triangulation
library(sp)                     # Needed for "point.in.polygon" function
library(splancs)                # Needed for "areapl" function
library(spatstat)               # Needed for "ppp" and "delaunay" functions
library(maps)
library(akima)
library(pracma)
library(e1071)
source("~/spring2020/geostats/scripts/triangfuncs.r") # Loads triangulation functions for use with polydec.
source("~/spring2020/geostats/scripts/polydec.r")# Loads R-script with all of my functions
source("~/spring2020/geostats/scripts/celldec.r")
source("~/spring2020/geostats/scripts/image.legend.r")
source("~/spring2020/geostats/scripts/allfunctions.r")
snow <- read.table("~/spring2020/geostats/homework/2_hw/snowdep.txt",header=T,sep = ",")
# 3 a - box plot, histogram, heatmap, correlogram (both axes)
snow.conc <- interp(snow$x,snow$y,snow$depth,nx=100,ny=100)
image(snow.conc,xlab="long",ylab="lat",cex.lab=1.6,   # Creates greyscale map of interpolated
main="Greyscale Map of Snowfall",   #   log concentrations using the colors
cex.axis=1.5,col=rev(heat.colors(24)),        #   in "heat.colors" in reverse, with
cex.main=1.2) #   axis labels and a title.
image.legend(6,47.8,zlim=range(snow$depth),       # Puts a legend on the map with upper
col=rev(heat.colors(24)))
for (i in names(landsat[, 3:9]){
image.plot(landsat[, i], main=i)
}
library(geoR)
library(spatial)
source("~/spring2020/geostats/scripts/corrplot.r")
source("~/spring2020/geostats/scripts/hscatter.r")
landsat <- read.table("~/spring2020/geostats/homework/2_hw/landsateng.txt",header=T)
landsat_mat = as.matrix(landsat)
bandCovariance = cov(landsat_mat[,3:9])
for (i in names(landsat[, 3:9]){
image.plot(landsat[, i], main=i)
}
library(geoR)
library(spatial)
source("~/spring2020/geostats/scripts/corrplot.r")
source("~/spring2020/geostats/scripts/hscatter.r")
landsat <- read.table("~/spring2020/geostats/homework/2_hw/landsateng.txt",header=T)
landsat_mat = as.matrix(landsat)
bandCovariance = cov(landsat_mat[,3:9])
for (i in names(landsat[, 3:9])){
image.plot(landsat[, i], main=i)
}
for (i in names(landsat[, 3:9])){
image(landsat[, i], main=i)
}
install.packages(c("fields", "geoR", "spatial"))
library(geoR)
library(spatial)
source("~/spring2020/geostats/scripts/corrplot.r")
source("~/spring2020/geostats/scripts/hscatter.r")
landsat <- read.table("~/spring2020/geostats/homework/2_hw/landsateng.txt",header=T)
landsat_mat = as.matrix(landsat)
bandCovariance = cov(landsat_mat[,3:9])
for (i in names(landsat[, 3:9])){
image.plot(landsat[, i], main=i)
}
library(geoR)
library(spatial)
library(fields)
source("~/spring2020/geostats/scripts/corrplot.r")
source("~/spring2020/geostats/scripts/hscatter.r")
landsat <- read.table("~/spring2020/geostats/homework/2_hw/landsateng.txt",header=T)
landsat_mat = as.matrix(landsat)
bandCovariance = cov(landsat_mat[,3:9])
for (i in names(landsat[, 3:9])){
image.plot(landsat[, i], main=i)
}
library(geoR)
library(spatial)
library(fields)
source("~/spring2020/geostats/scripts/corrplot.r")
source("~/spring2020/geostats/scripts/hscatter.r")
landsat <- read.table("~/spring2020/geostats/homework/2_hw/landsateng.txt",header=T)
landsat_mat = as.matrix(landsat)
bandCovariance = cov(landsat_mat[,3:9])
for (i in names(landsat[, 3:9])){
image.plot(as.numeric(landsat[, i]), main=i)
}
for (i in 3:9)){
image.plot(as.numeric(landsat[, i]), main=i)
}
library(geoR)
library(spatial)
library(fields)
source("~/spring2020/geostats/scripts/corrplot.r")
source("~/spring2020/geostats/scripts/hscatter.r")
landsat <- read.table("~/spring2020/geostats/homework/2_hw/landsateng.txt",header=T)
landsat_mat = as.matrix(landsat)
bandCovariance = cov(landsat_mat[,3:9])
for (i in 3:9){
image.plot(as.numeric(landsat[, i]), main=i)
}
library(geoR)
library(spatial)
library(fields)
source("~/spring2020/geostats/scripts/corrplot.r")
source("~/spring2020/geostats/scripts/hscatter.r")
landsat <- read.table("~/spring2020/geostats/homework/2_hw/landsateng.txt",header=T)
landsat_mat = as.matrix(landsat)
bandCovariance = cov(landsat_mat[,3:9])
for (i in 3:9){
image.plot(as.numeric(landsat[, i]))
}
install.packages("geoR")
library(geoR)
library(spatial)
library(fields)
source("~/spring2020/geostats/scripts/corrplot.r")
source("~/spring2020/geostats/scripts/hscatter.r")
landsat <- read.table("~/spring2020/geostats/homework/2_hw/landsateng.txt",header=T)
landsat_mat = as.matrix(landsat)
bandCovariance = cov(landsat_mat[,3:9])
for (i in 3:9){
image.plot(as.numeric(landsat[, i]))
}
for (i in 3:9){
image.plot(as.numeric(landsat_mat[, i]))
}
library(geoR)
library(spatial)
library(fields)
source("~/spring2020/geostats/scripts/corrplot.r")
source("~/spring2020/geostats/scripts/hscatter.r")
landsat <- read.table("~/spring2020/geostats/homework/2_hw/landsateng.txt",header=T)
landsat_mat = as.matrix(landsat)
bandCovariance = cov(landsat_mat[,3:9])
for (i in 3:9){
image.plot(interp(landsat_mat[,1],landsat_mat[,2],landsat_mat[,i],nx=100,ny=100))
}
snow <- read.table("~/spring2020/geostats/homework/2_hw/snowdep.txt",header=T,sep = ",")
# 3 a - box plot, histogram, heatmap, correlogram (both axes)
snow.conc <- interp(snow$x,snow$y,snow$depth,nx=100,ny=100)
image(snow.conc,xlab="long",ylab="lat",cex.lab=1.6,   # Creates greyscale map of interpolated
main="Greyscale Map of Snowfall",   #   log concentrations using the colors
cex.axis=1.5,col=rev(heat.colors(24)),        #   in "heat.colors" in reverse, with
cex.main=1.2) #   axis labels and a title.
points(snow$x,snow$y)
image.legend(6,47.8,zlim=range(snow$depth),       # Puts a legend on the map with upper
col=rev(heat.colors(24)))
plot(gravity$gravity,out$pred.pd,main="Prediction Polygonal Declustering")
lines(lowess( gravity$gravity,out$pred.pd))
abline(h=45)
plot( gravity$gravity,out$pred.tr,main="Prediction Triangulation")
lines(lowess( gravity$gravity,out$pred.tr))
abline(h=45)
plot( gravity$gravity,out$pred.ls,main="Prediction Local Sample Mean")
lines(lowess(gravity$gravity,out$pred.ls))
abline(h=45)
plot(gravity$gravity,out$pred.iw,main="Prediction Inverse Distance")
lines(lowess(gravity$gravity,out$pred.iw))
abline(h=45)
library(rgdal)
library(sp)
library(splancs)
gravity = read.table("~/spring2020/geostats/homework/2_hw/gravity255.txt",header=T,sep=",")
source("~/spring2020/geostats/scripts/point.crossval.r")
source("~/spring2020/geostats/scripts/LongLatToUTM.r")
source("~/spring2020/geostats/scripts/triangfuncs.r") # Loads triangulation functions for use with polydec.
source("~/spring2020/geostats/scripts/polydec.r")# Loads R-script with all of my functions
source("~/spring2020/geostats/scripts/celldec.r")
xy <- LongLatToUTM(gravity$long, gravity$lat,11)
p <- 2
r <- c(20000,40000,60000,80000,100000)
x = xy$X
y = xy$Y
z = gravity$gravity
for (i in 1:5){
point.crossval(xy$X,xy$Y,gravity$gravity,2,r[i])
}
p_ = c(0.2,0.5,1.0,2.0,5.0,10.0)
for (i in 1:length(p_)) {
point.crossval(x,y,z,p_[i],20000)
}
#QQ plots
out <- point.crossval(xy$X,xy$Y,gravity$gravity,1.0,40000)
qqplot( gravity$gravity,out$pred.pd)
qqplot( gravity$gravity,out$pred.tr)
qqplot( gravity$gravity,out$pred.ls)
qqplot( gravity$gravity,out$pred.iw)
#scatters
plot(gravity$gravity,out$pred.pd,main="Prediction Polygonal Declustering")
lines(lowess( gravity$gravity,out$pred.pd))
abline(h=45)
plot( gravity$gravity,out$pred.tr,main="Prediction Triangulation")
lines(lowess( gravity$gravity,out$pred.tr))
abline(h=45)
plot( gravity$gravity,out$pred.ls,main="Prediction Local Sample Mean")
lines(lowess(gravity$gravity,out$pred.ls))
abline(h=45)
plot(gravity$gravity,out$pred.iw,main="Prediction Inverse Distance")
lines(lowess(gravity$gravity,out$pred.iw))
abline(h=45)
out <- point.crossval(xy$X,xy$Y,gravity$gravity,1.0,40000)
xy <- LongLatToUTM(gravity$long, gravity$lat,11)
install.packages("rgdal")
library(rgdal)
library(sp)
library(splancs)
gravity = read.table("~/spring2020/geostats/homework/2_hw/gravity255.txt",header=T,sep=",")
source("~/spring2020/geostats/scripts/point.crossval.r")
source("~/spring2020/geostats/scripts/LongLatToUTM.r")
source("~/spring2020/geostats/scripts/triangfuncs.r") # Loads triangulation functions for use with polydec.
source("~/spring2020/geostats/scripts/polydec.r")# Loads R-script with all of my functions
source("~/spring2020/geostats/scripts/celldec.r")
xy <- LongLatToUTM(gravity$long, gravity$lat,11)
p <- 2
r <- c(20000,40000,60000,80000,100000)
x = xy$X
y = xy$Y
z = gravity$gravity
for (i in 1:5){
point.crossval(xy$X,xy$Y,gravity$gravity,2,r[i])
}
p_ = c(0.2,0.5,1.0,2.0,5.0,10.0)
for (i in 1:length(p_)) {
point.crossval(x,y,z,p_[i],20000)
}
#QQ plots
out <- point.crossval(xy$X,xy$Y,gravity$gravity,1.0,40000)
qqplot( gravity$gravity,out$pred.pd)
qqplot( gravity$gravity,out$pred.tr)
qqplot( gravity$gravity,out$pred.ls)
qqplot( gravity$gravity,out$pred.iw)
#scatters
plot(gravity$gravity,out$pred.pd,main="Prediction Polygonal Declustering")
lines(lowess( gravity$gravity,out$pred.pd))
abline(h=45)
plot( gravity$gravity,out$pred.tr,main="Prediction Triangulation")
lines(lowess( gravity$gravity,out$pred.tr))
abline(h=45)
plot( gravity$gravity,out$pred.ls,main="Prediction Local Sample Mean")
lines(lowess(gravity$gravity,out$pred.ls))
abline(h=45)
plot(gravity$gravity,out$pred.iw,main="Prediction Inverse Distance")
lines(lowess(gravity$gravity,out$pred.iw))
abline(h=45)
library(rgdal)
install.packages("rgdal")
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages('rgdal',type="source")
install.packages('rgeos', type="source")
install.packages('rgdal', type="source")
